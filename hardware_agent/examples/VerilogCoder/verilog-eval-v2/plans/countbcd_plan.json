[{"id": "1", "content": "Define the TopModule with the clk, reset inputs, and the ena, q outputs.\n\nRetrieved Related Information:\n- clk: input clock signal\n- reset: input synchronous active-high reset signal\n- ena: output 3-bit enable signal for the upper three BCD digits\n- q: output 16-bit signal representing the 4-digit BCD counter\n\nOn the positive edge of clk, if reset is high, q is set to 0 and ena is set to 0.\nOn the positive edge of clk, if reset is low, q increments by 1'b1.\nWhen q[3:0] (ones digit) rolls over from 4'b1001 to 4'b0000, ena[1] is set high to enable increment of q[7:4] (tens digit).\nWhen q[7:4] (tens digit) rolls over from 4'b1001 to 4'b0000, ena[2] is set high to enable increment of q[11:8] (hundreds digit).\nWhen q[11:8] (hundreds digit) rolls over from 4'b1001 to 4'b0000, ena[3] is set high to enable increment of q[15:12] (thousands digit).\n\n", "source": "The module should implement a 4-digit BCD (binary-coded decimal) counter.", "parent_tasks": []}, {"id": "2", "content": "Implement the ones digit counter logic that increments on every clock cycle and resets to 0 on reset, along with generating the enable signal for the tens digit when rolling over from 9 to 0.\n\nRetrieved Related Information:\n- clk: input clock signal\n- reset: input synchronous active-high reset signal\n- ena: output 3-bit enable signal for the upper three BCD digits\n- q: output 16-bit signal representing the 4-digit BCD counter\n- On the positive edge of clk, if reset is high, q is set to 0 and ena is set to 0.\n- On the positive edge of clk, if reset is low, q increments by 1'b1.\n- When q[3:0] (ones digit) rolls over from 4'b1001 to 4'b0000, ena[1] is set high to enable increment of q[7:4] (tens digit).\n- When q[7:4] (tens digit) rolls over from 4'b1001 to 4'b0000, ena[2] is set high to enable increment of q[11:8] (hundreds digit).\n- When q[11:8] (hundreds digit) rolls over from 4'b1001 to 4'b0000, ena[3] is set high to enable increment of q[15:12] (thousands digit).\n\n", "source": "Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, For digits [3:1], also output an enable signal (i.e., ena[3:1]) indicating when each of the upper three digits should be incremented.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the tens digit counter logic that increments when the enable signal is active and resets to 0 on reset, along with generating the enable signal for the hundreds digit when rolling over from 9 to 0.\n\nRetrieved Related Information:\n- clk: input clock signal\n- reset: input synchronous active-high reset signal\n- ena: output 3-bit enable signal for the upper three BCD digits\n- q: output 16-bit signal representing the 4-digit BCD counter\n\nOn the positive edge of clk, if reset is high, q is set to 0 and ena is set to 0.\nOn the positive edge of clk, if reset is low, q increments by 1'b1.\nWhen q[3:0] (ones digit) rolls over from 4'b1001 to 4'b0000, ena[1] is set high to enable increment of q[7:4] (tens digit).\nWhen q[7:4] (tens digit) rolls over from 4'b1001 to 4'b0000, ena[2] is set high to enable increment of q[11:8] (hundreds digit).\nWhen q[11:8] (hundreds digit) rolls over from 4'b1001 to 4'b0000, ena[3] is set high to enable increment of q[15:12] (thousands digit).\n\n", "source": "q[7:4] is the tens digit, For digits [3:1], also output an enable signal (i.e., ena[3:1]) indicating when each of the upper three digits should be incremented.", "parent_tasks": ["2"]}, {"id": "4", "content": "Implement the hundreds digit counter logic that increments when the enable signal is active and resets to 0 on reset, along with generating the enable signal for the thousands digit when rolling over from 9 to 0.\n\nRetrieved Related Information:\n- clk: input clock signal\n- reset: input synchronous active-high reset signal\n- ena: output 3-bit enable signal for the upper three BCD digits\n- q: output 16-bit signal representing the 4-digit BCD counter\n- On the positive edge of clk, if reset is high, q is set to 0 and ena is set to 0.\n- On the positive edge of clk, if reset is low, q increments by 1'b1.\n- When q[3:0] (ones digit) rolls over from 4'b1001 to 4'b0000, ena[1] is set high to enable increment of q[7:4] (tens digit).\n- When q[7:4] (tens digit) rolls over from 4'b1001 to 4'b0000, ena[2] is set high to enable increment of q[11:8] (hundreds digit).\n- When q[11:8] (hundreds digit) rolls over from 4'b1001 to 4'b0000, ena[3] is set high to enable increment of q[15:12] (thousands digit).\n\n", "source": "q[11:8] is the hundreds digit, For digits [3:1], also output an enable signal (i.e., ena[3:1]) indicating when each of the upper three digits should be incremented.", "parent_tasks": ["3"]}, {"id": "5", "content": "Implement the thousands digit counter logic that increments when the enable signal is active and resets to 0 on reset.\n\nRetrieved Related Information:\n- reset: input synchronous active-high reset signal\n- ena: output 3-bit enable signal for the upper three BCD digits\n- q: output 16-bit signal representing the 4-digit BCD counter\n- On the positive edge of clk, if reset is high, q is set to 0 and ena is set to 0.\n- On the positive edge of clk, if reset is low, q increments by 1'b1.\n- When q[3:0] (ones digit) rolls over from 4'b1001 to 4'b0000, ena[1] is set high to enable increment of q[7:4] (tens digit).\n- When q[7:4] (tens digit) rolls over from 4'b1001 to 4'b0000, ena[2] is set high to enable increment of q[11:8] (hundreds digit).\n- When q[11:8] (hundreds digit) rolls over from 4'b1001 to 4'b0000, ena[3] is set high to enable increment of q[15:12] (thousands digit).\n\n", "source": "q[15:12] is the thousands digit.", "parent_tasks": ["4"]}]