[{"id": "1", "content": "Define a wire to extract the most significant bit (sign bit) from the 8-bit input.\n\nRetrieved Related Information:\n- in: 8-bit input signal\n- sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5) (Type:SignalExample)\n- sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3) (Type:SignalExample)\n\n", "source": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value.", "parent_tasks": []}, {"id": "2", "content": "Replicate the extracted sign bit 24 times to create a 24-bit wire.\n\n", "source": "This is done by replicating the sign bit (the most significant bit) of the smaller number to the left.", "parent_tasks": ["1"]}, {"id": "3", "content": "Concatenate the 24-bit replicated sign bits with the original 8-bit input to form the 32-bit output.\n\nRetrieved Related Information:\n- in: 8-bit input signal\n- out: 32-bit output signal which is the sign-extended version of the input signal\n- Signal Example: sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5)\n- Signal Example: sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3)\n\n", "source": "Implement a module that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "parent_tasks": ["2"]}]