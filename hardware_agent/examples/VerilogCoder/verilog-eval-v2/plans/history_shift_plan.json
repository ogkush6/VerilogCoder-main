[{"id": "1", "content": "Implement an asynchronous reset for the 32-bit global history shift register. When areset is triggered, reset the history register to zero.\n\nRetrieved Related Information:\nareset: Asynchronous reset signal, resets the history counter to zero (Type:Signal)\n\n", "source": "areset is a positive edge triggered asynchronous reset that resets the history counter to zero.", "parent_tasks": []}, {"id": "2", "content": "Update the 32-bit global history shift register when a branch prediction is valid and no misprediction has occurred. Shift in the value of predict_taken from the LSB side.\n\nRetrieved Related Information:\n- predict_valid: Input signal indicating a branch prediction is being made (Type:Signal)\n- predict_taken: Input signal indicating the direction of the predicted branch (Type:Signal)\n- When predict_valid = 1, shift in predict_taken from the LSB side to update the branch history (Type:StateTransition)\n\n", "source": "When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch.", "parent_tasks": ["1"]}, {"id": "3", "content": "Handle the branch misprediction by loading the history register with the correct branch history. This involves concatenating train_history with train_taken and loading it into the history register.\n\nRetrieved Related Information:\n- predict_taken: Input signal indicating the direction of the predicted branch (Type:Signal)\n- train_mispredicted: Input signal indicating a branch misprediction has occurred (Type:Signal)\n- train_taken: Input signal indicating the actual result of the mispredicted branch (Type:Signal)\n- train_history: 32-bit input signal representing the branch history before the mispredicted branch (Type:Signal)\n- predict_history: 32-bit output signal representing the branch history register (Type:Signal)\n- When predict_valid = 1, shift in predict_taken from the LSB side to update the branch history (Type:StateTransition)\n- When train_mispredicted = 1, load the branch history register with train_history concatenated with train_taken (Type:StateTransition)\n- If both predict_valid and train_mispredicted are 1, the misprediction takes precedence (Type:StateTransition)\n\n", "source": "When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken).", "parent_tasks": ["2"]}, {"id": "4", "content": "Ensure that in the case of simultaneous prediction and misprediction, the misprediction logic takes precedence over the prediction logic.\n\nRetrieved Related Information:\n- When train_mispredicted = 1, load the branch history register with train_history concatenated with train_taken (Type:StateTransition)\n- If both predict_valid and train_mispredicted are 1, the misprediction takes precedence (Type:StateTransition)\n\n", "source": "If both a prediction and a misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction.", "parent_tasks": ["3"]}, {"id": "5", "content": "Output the current state of the 32-bit global history shift register to the predict_history output port.\n\nRetrieved Related Information:\n- predict_history: 32-bit output signal representing the branch history register.\n- When predict_valid = 1, shift in predict_taken from the LSB side to update the branch history.\n- When train_mispredicted = 1, load the branch history register with train_history concatenated with train_taken.\n\n", "source": "predict_history is the value of the branch history register.", "parent_tasks": ["4"]}]