[{"id": "1", "content": "Define the state types for the FSM. Create an enumerated type (enum) for the states of the FSM, which includes states such as IDLE, COUNTING, and DONE.\n\n", "source": "This module is a part of the FSM for controlling a shift register", "parent_tasks": []}, {"id": "2", "content": "Implement a state register to hold the current state of the FSM. This register should be updated on the positive edge of the clock and should be reset when the reset signal is active.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- reset: input reset signal, active high synchronous (Type:Signal)\n- Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). (Type:StateTransition)\n\n", "source": "Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the logic to transition from IDLE to COUNTING state when the reset signal is active high. This transition should occur synchronously with the clock.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- reset: input reset signal, active high synchronous (Type:Signal)\n- Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). (Type:StateTransition)\n\n", "source": "Reset should be active high synchronous.", "parent_tasks": ["2"]}, {"id": "4", "content": "```\nImplement a counter to count the number of clock cycles during which the shift register is enabled. The counter should reset to zero when transitioning to IDLE state and increment when in the COUNTING state.\n\nRetrieved Related Information:\nclk: input clock signal (Type:Signal)\nshift_ena: output signal to enable the shift register (Type:Signal)\nWhenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). (Type:StateTransition)\n```\n", "source": "we want the ability to enable the shift register for exactly 4 clock cycles", "parent_tasks": ["3"]}, {"id": "5", "content": "Implement the logic to transition from COUNTING to DONE state after the counter reaches 4. This ensures the shift register is enabled for exactly 4 clock cycles.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- shift_ena: output signal to enable the shift register (Type:Signal)\n- Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). (Type:StateTransition)\n\n", "source": "we want the ability to enable the shift register for exactly 4 clock cycles", "parent_tasks": ["4"]}, {"id": "6", "content": "Implement the logic to assert the shift_ena output when in the COUNTING state and deassert it when in any other state.\n\nRetrieved Related Information:\n- shift_ena: output signal to enable the shift register\n- Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset).\n\n", "source": "Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset).", "parent_tasks": ["5"]}, {"id": "7", "content": "Implement the logic to reset the state to IDLE when the DONE state is reached, ensuring the FSM can be triggered again by a subsequent reset.\n\nRetrieved Related Information:\n- reset: input reset signal, active high synchronous (Type:Signal)\n- Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). (Type:StateTransition)\n\n", "source": "Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset).", "parent_tasks": ["6"]}]