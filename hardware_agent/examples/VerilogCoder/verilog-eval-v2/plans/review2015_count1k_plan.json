[{"id": "1", "content": "Define a 10-bit register to hold the current count value of the counter.\n\nRetrieved Related Information:\n- q: output signal, 10 bits representing the counter value (Type:Signal)\n- On each positive edge of clk, if reset is high, set q to 0. (Type:StateTransition)\n- If reset is low, increment q by 1 every clock cycle until q reaches 999, then reset q to 0. (Type:StateTransition)\n\n", "source": "output q (10 bits)", "parent_tasks": []}, {"id": "2", "content": "```\nImplement logic to increment the counter by 1 on each positive edge of the clock, unless the counter is at its maximum value (999). If the counter reaches 999, it should wrap around to 0 on the next clock cycle.\n\nRetrieved Related Information:\n- clk: input clock signal\n- q: output signal, 10 bits representing the counter value\n- On each positive edge of clk, if reset is high, set q to 0.\n- If reset is low, increment q by 1 every clock cycle until q reaches 999, then reset q to 0.\n```\n", "source": "The module should implement a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement synchronous reset logic that sets the counter to 0 when the reset signal is active high.\n\nRetrieved Related Information:\n- reset: input reset signal, active high synchronous\n- On each positive edge of clk, if reset is high, set q to 0.\n\n", "source": "The reset input is active high synchronous, and should reset the counter to 0.", "parent_tasks": ["2"]}, {"id": "4", "content": "Connect the 10-bit counter register to the output port q.\n\nRetrieved Related Information:\n- q: output signal, 10 bits representing the counter value.\n- On each positive edge of clk, if reset is high, set q to 0.\n- If reset is low, increment q by 1 every clock cycle until q reaches 999, then reset q to 0.\n\n", "source": "output q (10 bits)", "parent_tasks": ["3"]}]