[{"id": "1", "content": "Define a 32-bit register to store the previous state of the input vector 'in'. This register will be used to detect changes from 1 to 0 and should be updated with the current 'in' vector at every positive clock edge when the reset is not active.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- reset: input active high synchronous reset signal (Type:Signal)\n- in: 32-bit input vector (Type:Signal)\n- On each positive edge of clk, if in changes from 1 to 0, out is set to 1. (Type:StateTransition)\n- Once out is set to 1, it remains 1 until reset is activated. (Type:StateTransition)\n- When reset is active, out is set to 0 and in is stored for the next capture. (Type:StateTransition)\n\n", "source": "The in (32 bits) need to be stored for next capture when the reset is active. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": []}, {"id": "2", "content": "```\nImplement a 32-bit register to hold the output vector 'out'. This register should only be updated on the positive edge of the clock and when the reset is not active. It should capture the changes from 1 to 0 detected by comparing the 'in' vector with the previous state register.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- reset: input active high synchronous reset signal (Type:Signal)\n- in: 32-bit input vector (Type:Signal)\n- out: 32-bit output vector (Type:Signal)\n- On each positive edge of clk, if in changes from 1 to 0, out is set to 1. (Type:StateTransition)\n- Once out is set to 1, it remains 1 until reset is activated. (Type:StateTransition)\n- When reset is active, out is set to 0 and in is stored for the next capture. (Type:StateTransition)\n```\n", "source": "capture when the in (32 bits) changes from 1 in one clock cycle to 0 the next. 'Capture' means that the out (32 bits) will remain 1 until out is reset (active high synchronous reset). Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the reset functionality. When the reset is active, clear the 'out' register and also update the previous state register with the current 'in' vector.\n\nRetrieved Related Information:\n- reset: input active high synchronous reset signal (Type:Signal)\n- in: 32-bit input vector (Type:Signal)\n- out: 32-bit output vector (Type:Signal)\n- When reset is active, out is set to 0 and in is stored for the next capture. (Type:StateTransition)\n- Once out is set to 1, it remains 1 until reset is activated. (Type:StateTransition)\n\n", "source": "'Capture' means that the out (32 bits) will remain 1 until out is reset (active high synchronous reset). The in (32 bits) need to be stored for next capture when the reset is active.", "parent_tasks": ["2"]}]