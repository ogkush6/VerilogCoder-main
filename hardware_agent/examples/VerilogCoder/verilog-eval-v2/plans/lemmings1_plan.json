[{"id": "1", "content": "Define the state types for the finite state machine. There should be two states: WALK_LEFT and WALK_RIGHT.\n\nRetrieved Related Information:\n- walk_right: output signal to indicate walking right (Type:Signal)\n- If bump_left is 1, transition to walking right. (Type:StateTransition)\n\n", "source": "The module should implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour.", "parent_tasks": []}, {"id": "2", "content": "Implement the state register to hold the current state of the Lemmings. This register should be updated on the positive edge of the clock and should be asynchronously reset to WALK_LEFT on the positive edge of areset.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- areset: input asynchronous reset signal, positive edge triggered (Type:Signal)\n- walk_left: output signal to indicate walking left (Type:Signal)\n- If areset is triggered, the Lemming machine resets to walk left. (Type:StateTransition)\n\n", "source": "areset is positive edge triggered asynchronous resetting the Lemming machine to walk left. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the next state logic. The next state should be determined based on the current state and the inputs bump_left and bump_right. If bump_left is high, transition to WALK_RIGHT. If bump_right is high, transition to WALK_LEFT. If both are high, switch to the opposite direction.\n\nRetrieved Related Information:\n- bump_left: input signal indicating a bump on the left (Type:Signal)\n- bump_right: input signal indicating a bump on the right (Type:Signal)\n- walk_left: output signal to indicate walking left (Type:Signal)\n- walk_right: output signal to indicate walking right (Type:Signal)\n- If bump_left is 1, transition to walking right. (Type:StateTransition)\n- If bump_right is 1, transition to walking left. (Type:StateTransition)\n\n", "source": "In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions.", "parent_tasks": ["2"]}, {"id": "4", "content": "```\nImplement the output logic for walk_left and walk_right based on the current state. If the state is WALK_LEFT, set walk_left to 1 and walk_right to 0. If the state is WALK_RIGHT, set walk_left to 0 and walk_right to 1.\n\nRetrieved Related Information:\nwalk_left: output signal to indicate walking left (Type:Signal)\nwalk_right: output signal to indicate walking right (Type:Signal)\n```\n", "source": "The module should implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour.", "parent_tasks": ["3"]}]