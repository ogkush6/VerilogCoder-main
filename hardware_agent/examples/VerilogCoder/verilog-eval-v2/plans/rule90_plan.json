[{"id": "1", "content": "Define a 512-bit register to hold the current state of the cells.\n\nRetrieved Related Information:\n- data: 512-bit input data representing the state of the system (Type:Signal)\n- q: 512-bit output representing the state of the cells (Type:Signal)\n\n", "source": "The module should implement Rule 90, a one-dimensional cellular automaton with interesting properties.", "parent_tasks": []}, {"id": "2", "content": "Implement a logic block to load the initial state of the cells from the input data when the load signal is asserted.\n\nRetrieved Related Information:\n- load: input signal to load the state of the system with data (Type:Signal)\n- data: 512-bit input data representing the state of the system (Type:Signal)\n\n", "source": "The load input indicates the state of the system should be loaded with data[511:0].", "parent_tasks": ["1"]}, {"id": "3", "content": "Define a 512-bit wire to compute the next state of each cell based on the XOR of its two neighbors.\n\nRetrieved Related Information:\n- data: 512-bit input data representing the state of the system (Type:Signal)\n- q: 512-bit output representing the state of the cells (Type:Signal)\n- Left | Center | Right | Center's next state (Type:StateTransition)\n  - 1    | 1      | 1     | 0 (Type:StateTransition)\n  - 1    | 1      | 0     | 1 (Type:StateTransition)\n  - 1    | 0      | 1     | 0 (Type:StateTransition)\n  - 1    | 0      | 0     | 1 (Type:StateTransition)\n  - 0    | 1      | 1     | 1 (Type:StateTransition)\n  - 0    | 1      | 0     | 0 (Type:StateTransition)\n  - 0    | 0      | 1     | 1 (Type:StateTransition)\n  - 0    | 0      | 0     | 0 (Type:StateTransition)\n\n", "source": "At each time step, the next state of each cell is the XOR of the cell's two current neighbours.", "parent_tasks": ["2"]}, {"id": "4", "content": "```\nImplement boundary conditions by assuming the cells outside the array (q[-1] and q[512]) are zero.\n\nRetrieved Related Information:\nq: 512-bit output representing the state of the cells (Type:Signal)\n```\n", "source": "Assume the boundaries (q[-1] and q[512]) are both zero (off).", "parent_tasks": ["3"]}, {"id": "5", "content": "Update the state of the cells at each positive edge of the clock based on the computed next state.\n\nRetrieved Related Information:\n- clk: input clock signal (Type:Signal)\n- 1 | 0 | 1 | 0 (Type:StateTransition)\n- 0 | 1 | 1 | 1 (Type:StateTransition)\n- 0 | 0 | 1 | 1 (Type:StateTransition)\n\n", "source": "Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["4"]}, {"id": "6", "content": "Connect the output port q to the current state of the cells.\n\nRetrieved Related Information:\n- q: 512-bit output representing the state of the cells (Type:Signal)\n- Left | Center | Right | Center's next state (Type:StateTransition)\n  - 1    | 1      | 1     | 0 (Type:StateTransition)\n  - 1    | 1      | 0     | 1 (Type:StateTransition)\n  - 1    | 0      | 1     | 0 (Type:StateTransition)\n  - 1    | 0      | 0     | 1 (Type:StateTransition)\n  - 0    | 1      | 1     | 1 (Type:StateTransition)\n  - 0    | 1      | 0     | 0 (Type:StateTransition)\n  - 0    | 0      | 1     | 1 (Type:StateTransition)\n  - 0    | 0      | 0     | 0 (Type:StateTransition)\n\n", "source": "output q (512 bits)", "parent_tasks": ["5"]}]