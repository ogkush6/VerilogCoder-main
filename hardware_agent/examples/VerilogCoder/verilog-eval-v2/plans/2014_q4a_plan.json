[{"id": "1", "content": "Define a register to hold the current state of the output Q. This register should be updated on the positive edge of the clock.\n\nRetrieved Related Information:\n- clk: Clock input (Type:Signal)\n- On the positive edge of clk: (Type:StateTransition)\n\n", "source": "Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": []}, {"id": "2", "content": "Implement logic to handle the loading of the value R into the Q register when L is asserted. If L is high, Q should be loaded with the value of R on the next clock edge.\n\nRetrieved Related Information:\n- Clock input (Type:Signal)\n- Value to load into the register (Type:Signal)\n- Load signal, asserted to load the value (Type:Signal)\n- Output of the current stage of the shift register (Type:Signal)\n- On the positive edge of clk: If L is asserted, Q loads the value of R. (Type:StateTransition)\n\n", "source": "R for value to load, L is asserted when it should load", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement logic to handle the shifting operation. If E is high and L is low, Q should be updated with the value of w on the next clock edge.\n\nRetrieved Related Information:\n- On the positive edge of clk: If L is not asserted and E is asserted, Q takes the value of w. (Type:StateTransition)\n\n", "source": "Input E is for enabling shift, w is the input from the previous stage of the shift register.", "parent_tasks": ["2"]}]