[{"id": "1", "content": "Define the TopModule with input clk, input reset, and output q (32 bits).\n\nRetrieved Related Information:\n- clk: input clock signal\n- reset: input reset signal, active high\n- q: output signal, 32 bits representing the state of the LFSR\n- On reset (active high), q is set to 32'h1.\n- On each positive edge of clk, if reset is not active, the LFSR shifts right.\n- Bit positions 32, 22, 2, and 1 are taps. Each of these positions is XORed with q[0] to produce their next value.\n- The MSB (q[31]) is a special case where it is the result of q[0] XORed with 1'b0.\n\n", "source": "input  clk, input  reset, output q (32 bits)", "parent_tasks": []}, {"id": "2", "content": "Implement the synchronous reset logic to initialize the output q to 32'h1 when reset is active high.\n\nRetrieved Related Information:\n- reset: input reset signal, active high (Type:Signal)\n- q: output signal, 32 bits representing the state of the LFSR (Type:Signal)\n- On reset (active high), q is set to 32'h1. (Type:StateTransition)\n\n", "source": "Reset should be active high synchronous, and should reset the output q to 32'h1.", "parent_tasks": ["1"]}, {"id": "3", "content": "```\nImplement the shift register logic for the output q[31:1] where each bit position without a tap shifts right.\n\nRetrieved Related Information:\nOn each positive edge of clk, if reset is not active, the LFSR shifts right. (Type:StateTransition)\n```\n", "source": "bit positions without a tap shift right", "parent_tasks": ["2"]}, {"id": "4", "content": "Implement the XOR logic for the tap positions at q[31], q[21], q[1], and q[0] where each of these positions is XORed with q[0] to produce their next value.\n\nRetrieved Related Information:\n- On reset (active high), q is set to 32'h1.\n- On each positive edge of clk, if reset is not active, the LFSR shifts right.\n- Bit positions 32, 22, 2, and 1 are taps. Each of these positions is XORed with q[0] to produce their next value.\n- The MSB (q[31]) is a special case where it is the result of q[0] XORed with 1'b0.\n\n", "source": "Each bit position with taps (i.e., 32, 22, 2, and 1) produces their next value by XORed with q[0]", "parent_tasks": ["3"]}, {"id": "5", "content": "Implement the wrapping right shift logic for the MSB tap position at q[31] where it is q[0] XORed with 1'b0.\n\n", "source": "tap position at the MSB bit position (i.e., 32) is wrapping right shift (i.e., q[0]) XORed with 1'b0", "parent_tasks": ["4"]}]