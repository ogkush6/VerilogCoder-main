
I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  areset
 - input  bump_left
 - input  bump_right
 - input  ground
 - output walk_left
 - output walk_right
 - output aaah

The game Lemmings involves critters with fairly simple brains. So simple
that we are going to model it using a finite state machine. In the
Lemmings' 2D world, Lemmings can be in one of two states: walking left
(walk_left is 1) or walking right (walk_right is 1). It will switch
directions if it hits an obstacle. In particular, if a Lemming is bumped
on the left (by receiving a 1 on bump_left) when walking left, it will switch 
to walking right state. If it's bumped on the right (by receiving a 1 on 
bump_right) when walking right, it will switch to walking left.

In addition to walking left and right and changing direction when bumped,
when ground=0, the Lemming will fall and say "aaah!". When the ground 
reappears (ground=1), the Lemming will resume walking in the same direction 
as before the fall. The fall (ground=0) status can be consecutively more than 
once, Lemming need to remain the walking left or walking right status when fall.
Being bumped while falling does not affect the walking direction, and being 
bumped in the same cycle as ground disappears (but not yet falling), or when 
the ground reappears while still falling, also does not affect the walking direction.

Implement a Moore state machine that models this behaviour. areset is
positive edge triggered asynchronous reseting the Lemming machine to walk
left. Assume all sequential logic is triggered on the positive edge of
the clock.

