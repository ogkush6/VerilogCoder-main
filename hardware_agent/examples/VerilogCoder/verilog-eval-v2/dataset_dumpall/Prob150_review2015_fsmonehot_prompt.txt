I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  d
 - input  done_counting
 - input  ack
 - input  state (10 bits)
 - output B3_next
 - output S_next
 - output S1_next
 - output Count_next
 - output Wait_next
 - output done
 - output counting
 - output shift_ena

The module is the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done).
Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares. 

state   (output)      --input--> next state
-------------------------------------------
  S     ()            --d=0--> S
  S     ()            --d=1--> S1
  S1    ()            --d=0--> S
  S1    ()            --d=1--> S11
  S11   ()            --d=0--> S110
  S11   ()            --d=1--> S11
  S110  ()            --d=0--> S
  S110  ()            --d=1--> B0
  B0    (shift_ena=1) --(always go to next cycle)--> B1
  B1    (shift_ena=1) --(always go to next cycle)--> B2
  B2    (shift_ena=1) --(always go to next cycle)--> B3
  B3    (shift_ena=1) --(always go to next cycle)--> Count
  Count (counting=1)  --done_counting=0--> Count
  Count (counting=1)  --done_counting=1--> Wait
  Wait  (done=1)      --ack=0--> Wait
  Wait  (done=1)      --ack=1--> S

In the beginning, the state machine starts in state "S". Make sure all the row 
in the state transition table are implemented. Derive next-state logic
equations and output logic equations by inspection assuming the following
one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait)
= (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)

The input 10-bits state can be a combinations of multiple states above.
The module is expected to response the state bit.
For example, when the input state[9:0] = 10'b1000100100, state[9] == 1, 
state[5] == 1, and state[2] == 1, the states includes Wait, B1, and S11 states.

Derive state transition and output logic equations by inspection assuming
a one-hot encoding. Implement the state transition logic and output
logic (the combinational logic portion) for this state machine. You need to 
consider the state transition to the same state.

Complete the module that implements the following output signals:

 - B3_next -- Pull to 1 When next-state is B3 state
 - S_next -- Pull to 1 When next-state is S state
 - S1_next -- Pull to 1 When next-state is S1 state
 - Count_next -- Pull to 1 When next-state is Count state
 - Wait_next -- Pull to 1 When next-state is Wait state
 - done -- output logic
 - counting -- output logic
 - shift_ena -- output logic

