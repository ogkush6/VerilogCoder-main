I would like you to implement a module named TopModule with the following
interface. All input and output ports are one bit unless otherwise
specified.

 - input  clk
 - input  in
 - input  reset
 - output out_byte (8 bits)
 - output done

In many (older) serial communications protocols, each data byte is sent along 
with a start bit and a stop bit, to help the receiver delimit bytes from the 
stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 
1 stop bit (1). The `in` stays at logic 1 when nothing is being transmitted. 
The FSM should start to receive the following 8 data bits right after detect the 
start bit (0). Design a finite state machine that will identify when bytes have been 
correctly received when given a stream of bits. It needs to start to receive the data 
right away when the start bit (0) occurs, receive the consecutive all 8 data bits, 
then verify that the stop bit (1) was correct of `in`. `done` is set to 1 after verify 
the stop bit (1), otherwise, it will be remain 0. The module will also output the 
correctly-received data byte. `out_byte` needs to be valid when `done` is 1, and is 
don't-care otherwise (8'bx). If the stop bit does not appear when expected, the FSM 
enters error state and must wait until it finds a stop bit before attempting to 
receive the next byte. Include a active-high synchronous reset. Note that the serial 
protocol `in` sends in a sequence from LSB to MSB. Assume all sequential logic 
is triggered on the positive edge of the clock. 
